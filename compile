#!/bin/bash

case $# in
  0) echo "Parameters not recognized, type compile --help for help";;
  1) FILE=$1;;
  2) FILE=$1; EXE=$2;;
  *) echo "Parameters not recognized, type compile --help for help";;
esac

NAME=${FILE%.*}    #removes the extension using shell parameter expansion
<<<<<<< HEAD

###############################################################################

#function to list all the paths of the subdirectory
function listCPPFiles {
	for i in $(find -type f)
	do
		if [ "${i##*.}" = "cpp" ]
		then
			echo "$i"
		fi
	done
}

###############################################################################
=======
>>>>>>> d81e89522eff1a3988532e3e70b6a1c243c95a50

if [ "$FILE" = "--help" ]
then
  echo "Usage for single source file-"
	echo "$ compile <filename with extension>"
  echo "Only for .c and .cpp files"
	echo -e "\nFor multiple files even in nested directories-"
	echo "$ compile -m"
	echo "You'll then be prompted to enter the executable name once the compilation terminates successfully"

elif [ "${FILE##*.}" = "c" ]    #extension is .c
then
  gcc -c -pedantic $FILE -o temp.o
  if [ "$?" = "0" ]    #compilation returns 0
  then
	  gcc temp.o -o $NAME
		rm temp.o
  else
		echo "Unsuccessful compilation"
  fi

elif [ "${FILE##*.}" = "cpp" ] || [ "${FILE##*.}" = "C" ]    #extension is .cpp or .C
then
  g++ -c -pedantic -std=c++11 $FILE -o temp.o
  if [ "$?" = "0" ]    #compilation returns 0
  then
		g++ temp.o -o $NAME
		rm temp.o
  else
		echo "Unsuccessful compilation"
		exit 1
  fi

elif [ "$FILE" = "-m" ]    #compile a code with multiple source files
then
<<<<<<< HEAD
  if [ ! -d "o-files" ]    #create a directory for the object files to reside in if one does not exist already
  then
		mkdir o-files
  fi
=======
    if [ ! -d "o-files" ]    #create a directory for the object files to reside in if one does not exist already
    then
	mkdir o-files

    fi
>>>>>>> d81e89522eff1a3988532e3e70b6a1c243c95a50

  for i in $(listCPPFiles)
  do
		echo "compiling $i"
		g++ -c -pedantic -std=c++11 $i
		if [ "$?" != "0" ]
		then
			echo "Unsuccessful compilation"
			exit 1

		fi
  done

<<<<<<< HEAD
  mv *.o o-files
  cd o-files

  if [ "$?" = "0" ]
  then
		echo "Enter the executable name"
		read EXENAME
		g++ `ls` -o $EXENAME
		mv $EXENAME ..
  fi

=======
    if [ "$?" = "0" ]
    then
	echo "Enter the executable name"
	read EXENAME
	g++ `ls` -o $EXENAME
	mv $EXENAME ..
    fi
    
>>>>>>> d81e89522eff1a3988532e3e70b6a1c243c95a50
else
  echo "Invalid parameters. Type 'compile --help'"
fi
