#!/bin/bash

case $# in
    0) echo "Parameters not recognized, type compile --help for help";;
    1) FILE=$1;;
    *) echo "Parameters not recognized, type compile --help for help";;
esac

NAME=${FILE%.*}    #removes the extension using the cut command

if [ "$FILE" = "--help" ]
then
    echo "Usage- $ compile <filename with extension>"
    echo "Only for .c and .cpp files"

elif [ "${FILE##*.}" = "c" ]    #extension is .c
then
    gcc -c $FILE -o temp.o
    if [ "$?" = "0" ]    #compilation returns 0
    then
	gcc temp.o -o $NAME
	rm temp.o
    else
	echo "Unsuccessful compilation"
    fi

elif [ "${FILE##*.}" = "cpp" ] || [ "${FILE##*.}" = "C" ]    #extension is .cpp or .C
then
    g++ -c $FILE -o temp.o
    if [ "$?" = "0" ]    #compilation returns 0
    then
	g++ temp.o -o $NAME
	rm temp.o
    else
	echo "Unsuccessful compilation"

    fi

elif [ "$FILE" = "-m" ]    #compile a code with multiple source files
then

    if [ ! -d "o-files" ]    #create a directory for the object files to reside in if one does not exist already
    then
	mkdir o-files

    fi

    for i in `(ls *.cpp)`
    do
	g++ -c $i
    done

    mv *.o o-files
    cd o-files

    if [ "$?" = "0" ]
    then
	echo "Enter the executable name"
	read EXENAME
	g++ `ls` -o $EXENAME
	mv $EXENAME ..

    fi
    
else
    echo "Invalid parameters. Type 'compile --help'"

fi
